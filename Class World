package mundo;

import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.IOException;

import javax.imageio.ImageIO;

import entidades.Arma;
import entidades.CaixaVida;
import entidades.Entidade;
import entidades.Inimigo;
import entidades.Municao;
import pricipal.Games;

public class Mundo {

	public static Tile[] tiles;
	public static int WIDTH, HEIGHT;
	public static final int TILE_SIZE = 16;
	
	public Mundo(String path) {
		try {
			BufferedImage map = ImageIO.read(getClass().getResource(path));
			int [] pixels = new int[map.getWidth() * map.getHeight()];
			WIDTH = map.getWidth();
			HEIGHT = map.getHeight();
			tiles = new Tile[map.getWidth() * map.getHeight()];
			map.getRGB(0, 0, map.getWidth(), map.getHeight(), pixels, 0, map.getWidth());
			for(int xx = 0; xx < map.getWidth(); xx++) {
					for(int yy = 0; yy < map.getHeight(); yy++) {
						int pixelAtual = pixels[xx + (yy * map.getWidth())];
						tiles[xx + (yy * WIDTH)] = new FloorTile(xx*16, yy*16, Tile.tile_chao);
						if(pixelAtual == 0xFF000000) {
							//Chão
							tiles[xx +  (yy * WIDTH)] = new FloorTile(xx*16, yy*16, Tile.tile_chao);
						}
						else if ( pixelAtual == 0xFFFFFFFF) {
							//Parede
							tiles[xx + (yy * WIDTH)] = new WallTile(xx*16, yy*16, Tile.tile_parede);
						}
						else if(pixelAtual == 0xFF0026FF) {
							//Player
							Games.player.setX(xx*16);
							Games.player.setY(yy*16);
						}
						else if (pixelAtual == 0xFFFF0000){
							//Inimigo
							Inimigo en = new Inimigo(xx*16,yy*16,16,16, Entidade.INIMIGO);
							Games.entidade.add(en);
							Games.inimigos.add(en);
						}
						else if ( pixelAtual == 0xFF7F0000) {
							//Arma
							Games.entidade.add(new Arma(xx*16,yy*16,16,16, Entidade.ARMA));
						}
						else if (pixelAtual == 0xFFFFD800) {
							//Munição
							Games.entidade.add(new Municao(xx*16,yy*16,16,16, Entidade.MUNICAO));
						}
						else if ( pixelAtual == 0XFF4CFF00) {
							//Caixa_VIDA
							CaixaVida caixa = new CaixaVida(xx*16,yy*16,16,16, Entidade.CAIXA_VIDA);
							Games.entidade.add(caixa);
						}
							
					}
				}
			
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static boolean isFree(int xnext, int ynext) {
		int x1 = xnext / TILE_SIZE;
		int y1 = ynext / TILE_SIZE;
		
		int x2 = (xnext+TILE_SIZE-1) / TILE_SIZE;
		int y2 = ynext / TILE_SIZE;
		
		int x3 = xnext / TILE_SIZE;
		int y3 = (ynext+TILE_SIZE-1) / TILE_SIZE;
		
		int x4 = (xnext+TILE_SIZE-1) / TILE_SIZE;
		int y4 = (ynext+TILE_SIZE-1) / TILE_SIZE;
		
		return !((tiles[x1 + (y1*Mundo.WIDTH)] instanceof WallTile) || 
				(tiles[x2 + (y2*Mundo.WIDTH)] instanceof WallTile) ||
				(tiles[x3 + (y3*Mundo.WIDTH)] instanceof WallTile) || 
				(tiles[x4 + (y4*Mundo.WIDTH)] instanceof WallTile));
	}
	
	public void render(Graphics g) {
		int xstart = Camera.x >> 4;
		int ystart = Camera.y >> 4;
		
		int xfinal = xstart + (Games.WIDTH >> 4);
		int yfinal = ystart + (Games.HEIGHT >> 4);
		
		for (int xx = xstart; xx <= xfinal; xx++) {
			for (int yy = ystart ; yy <= yfinal; yy++) {
				if (xx < 0 || yy < 0 || xx >= WIDTH || yy >= HEIGHT)
					continue;
				Tile tile = tiles[xx + (yy*WIDTH)];
				tile.render(g);
			}
		}
	}
	
}
