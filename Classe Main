package pricipal;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFrame;

import entidades.Entidade;
import entidades.Player;
import graficos.Spritesheet;
import mundo.Mundo;


public class Games extends Canvas implements Runnable, KeyListener{

	private static final long serialVersionUID = 1L;
	public static JFrame frame;
	private Thread thread;
	private boolean isRunning = true;
	private final int WIDTH = 300;
	private final int HEIGHT = 200;
	private final int SCALE = 3;
	
	private BufferedImage image;
	
	public List<Entidade> entidade;
	public static Spritesheet spritesheet;
	
	public static Mundo mundo;
	
	private Player player;

	public static void main(String[] args) {
		Games game = new Games();
		game.start();
	}
	
	
	/*Construtor*/
	public Games() {
		addKeyListener(this);
		setPreferredSize(new Dimension(WIDTH*SCALE, HEIGHT*SCALE));
		initFrame();
		
		//Inicializando Objetos
		
		image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
		entidade = new ArrayList<Entidade>();
		spritesheet = new Spritesheet("/spriteheet.game1.png");
		mundo = new Mundo ("/map.png");
		player = new Player  (0,0,16,16,spritesheet.getSprite(0, 0, 17, 17));
		entidade.add(player);
	}
	
	//Criando janela 
	public void initFrame() {
		frame = new JFrame("Game 1#");
		frame.add(this);
		frame.setResizable(false);
		frame.pack();
		frame.setLocationRelativeTo(null);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
	}
	
	//Startando o Jogo
	public synchronized void start() {
		thread = new Thread(this);
		isRunning = true;
		thread.start();
	}
	
	//Parando o Jogo 
	public  synchronized void stop() {
		isRunning = false;
		try {
			thread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	
	
	//Controla Velocidade
	public void Tick () {
		for (int i = 0; i < entidade.size(); i++) {
			Entidade e = entidade.get(i);
			e.tick();
		}
	}
	
	//Renderizando
	public void Render() {
		BufferStrategy bs = this.getBufferStrategy();
		if(bs == null){
			this.createBufferStrategy(3);
			return;
		}
		Graphics g = image.getGraphics();
		//Tela de fundo
		g.setColor(new Color(0,0,0));
		g.fillRect(0, 0, WIDTH, HEIGHT);
		
		/*Quadrado
		 *g.setColor(Color.WHITE);
		 *g.fillRect(20, 30, 157, 117);
		*/
		
		/*Circulo
		 *g.setColor(Color.BLACK);
		 *g.fillOval(0, 0, 50, 50);
		*/
		
		/*Colocando String na tela
		*g.setFont(new Font ("Arial",Font.BOLD,10));
		*g.setColor(Color.WHITE);
		*g.drawString("Ola Mundo", 55, 60);
		*/
		
		/*renderização do jogo*/
		mundo.render(g);
		for (int i = 0; i < entidade.size(); i++) {
			Entidade e = entidade.get(i);
			e.render(g);
		}
		/***/
		//Colocando a imagem na aplicação
		g.dispose();
		g = bs.getDrawGraphics();
		g.drawImage (image, 0, 0, WIDTH*SCALE, HEIGHT*SCALE, null);
		bs.show();
	}

	/*Looping para rodar um jogo*/
	public void run() {
		long lastTime = System.nanoTime();
		double amountOfTicks = 60.0;
		double ns = 1000000000 / amountOfTicks;
		double delta = 0;
		int frames = 0;
		double timer = System.currentTimeMillis();
		while(isRunning) {
			
			long now = System.nanoTime();
			delta+= (now - lastTime) / ns;
			lastTime = now;
			
			if (delta >= 1) {
				Tick();
				Render();
				frames++;
				delta--;
			}
			
			if(System.currentTimeMillis() - timer >= 1000) {
				System.out.println("FPS: "+ frames);
				frames = 0;
				timer+=1000;
			}
			
		}
stop();
	}

	@Override
	public void keyTyped(KeyEvent e) {

	}

	
	@Override
	public void keyPressed(KeyEvent e) {
		if(e.getKeyCode() == KeyEvent.VK_RIGHT || e.getKeyCode() == KeyEvent.VK_D) {
			player.right = true;
		}else if(e.getKeyCode() == KeyEvent.VK_LEFT || e.getKeyCode() == KeyEvent.VK_A) {
			player.left = true;
		}
		
		if(e.getKeyCode() == KeyEvent.VK_UP || e.getKeyCode() == KeyEvent.VK_W) {
			player.up = true;
		}else if (e.getKeyCode() == KeyEvent.VK_DOWN || e.getKeyCode() == KeyEvent.VK_S) {
			player.down = true;
		}		
	}
	

	@Override
	public void keyReleased(KeyEvent e) {
		if(e.getKeyCode() == KeyEvent.VK_RIGHT || e.getKeyCode() == KeyEvent.VK_D) {
			player.right = false;
		}else if(e.getKeyCode() == KeyEvent.VK_LEFT || e.getKeyCode() == KeyEvent.VK_A) {
			player.left = false;
		}
		
		if(e.getKeyCode() == KeyEvent.VK_UP || e.getKeyCode() == KeyEvent.VK_W) {
			player.up = false;
		}else if (e.getKeyCode() == KeyEvent.VK_DOWN || e.getKeyCode() == KeyEvent.VK_S) {
			player.down = false;
		}	
		
	}
	
}

